name: Build macOS Simple

on:
  workflow_dispatch:

jobs:
  build-mac:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install PySide6 python-vlc shiboken6
        pip install numpy pandas matplotlib Pillow
        pip install pyinstaller>=6.0.0
        pip install setuptools packaging
    
    - name: Create spec file
      run: |
        cat > RABET.spec << 'EOF'
        # -*- mode: python ; coding: utf-8 -*-
        
        block_cipher = None
        
        # Excluded modules for size optimization
        excluded_modules = [
            'PyQt5', 'PyQt6', 'wx', 'tkinter', 'gtk',
            'scipy', 'sklearn', 'seaborn', 'statsmodels',
            'tensorflow', 'torch', 'keras',
            'django', 'flask', 'fastapi',
            'pytest', 'unittest', 'sphinx', 'IPython', 'jupyter',
            'sqlite3', 'psycopg2', 'mysql', 'pymongo', 'sqlalchemy',
            'imageio', 'h5py', 'dask', 'numba',
            'test', 'tests', 'distutils'
        ]
        
        a = Analysis(
            ['main.py'],
            pathex=[],
            binaries=[],
            datas=[
                ('resources', 'resources'),
                ('configs', 'configs'),
            ],
            hiddenimports=[
                'vlc',
                'matplotlib.backends.backend_qt5agg',
                'PIL',
                'PIL.Image',
                'setuptools',
                'pkg_resources',
            ],
            hookspath=[],
            hooksconfig={},
            runtime_hooks=[],
            excludes=excluded_modules,
            win_no_prefer_redirects=False,
            win_private_assemblies=False,
            cipher=block_cipher,
            noarchive=False,
        )
        
        # Remove test files and debug libraries
        a.binaries = TOC([x for x in a.binaries if not any(
            exc in x[0] for exc in ['_test', 'test/', '/tests/', '_debug', 'QtWebEngine', 'QtDesigner', 'Qt3D']
        )])
        
        a.datas = TOC([x for x in a.datas if not any(
            exc in x[0] for exc in ['test/', 'tests/', 'examples/', 'sample_data']
        )])
        
        pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)
        
        exe = EXE(
            pyz,
            a.scripts,
            a.binaries,
            a.zipfiles,
            a.datas,
            name='RABET',
            debug=False,
            bootloader_ignore_signals=False,
            strip=True,
            upx=False,
            console=False,
            disable_windowed_traceback=False,
            argv_emulation=True,
            target_arch=None,
            codesign_identity=None,
            entitlements_file=None,
        )
        
        app = BUNDLE(
            exe,
            name='RABET.app',
            icon=None,
            bundle_identifier='com.rabet.app',
            info_plist={
                'NSHighResolutionCapable': 'True',
                'LSMinimumSystemVersion': '10.15.0',
            },
        )
        EOF
    
    - name: Ensure directories exist
      run: |
        mkdir -p resources configs logs projects
        
        # Create default configs
        echo '{"o": "Attack bites", "j": "Sideways threats", "p": "Tail rattles"}' > configs/default_action_map.json
        echo '{"latency_metrics": [], "total_time_metrics": []}' > configs/default_metrics.json
    
    - name: Build with PyInstaller
      run: |
        pyinstaller RABET.spec --noconfirm --clean
    
    - name: Post-build cleanup
      run: |
        APP_PATH="dist/RABET.app"
        if [ -d "$APP_PATH" ]; then
          # Remove unnecessary files
          find "$APP_PATH" -name "*.pyc" -delete
          find "$APP_PATH" -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null
          find "$APP_PATH" -type d -name "test*" -exec rm -rf {} + 2>/dev/null
          find "$APP_PATH" -type d -name "examples" -exec rm -rf {} + 2>/dev/null
          
          # Show size
          echo "App size: $(du -sh "$APP_PATH" | cut -f1)"
        fi
    
    - name: Create DMG
      run: |
        if [ -d "dist/RABET.app" ]; then
          mkdir -p dist/dmg
          cp -R dist/RABET.app dist/dmg/
          ln -s /Applications dist/dmg/Applications
          
          hdiutil create -volname "RABET" -srcfolder dist/dmg -ov -format UDZO RABET-macOS.dmg
          
          echo "DMG size: $(du -sh RABET-macOS.dmg | cut -f1)"
        fi
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: RABET-macOS
        path: |
          dist/RABET.app
          RABET-macOS.dmg
        if-no-files-found: error
